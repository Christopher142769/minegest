import google.generativeai as genai
import os
from typing import Optional
import logging # Import the logging module

logger = logging.getLogger(__name__)

class GeminiWebExpert:
    """
    Classe pour utiliser Gemini comme expert en d√©veloppement web
    """
    
    def __init__(self, api_key: str):
        """
        Initialise l'expert Gemini avec la cl√© API
        
        Args:
            api_key (str): Cl√© API Gemini
        """
        self.api_key = api_key
        self.model = None
        self.configure_api()
    
    def configure_api(self):
        """Configure l'API Gemini avec la cl√© fournie"""
        try:
            genai.configure(api_key=self.api_key)
            # Utiliser Gemini 2.0 Flash pour la g√©n√©ration de code
            self.model = genai.GenerativeModel('gemini-2.0-flash-exp')
            logger.info("‚úÖ API Gemini configur√©e avec succ√®s pour Expert_Web_Gemini")
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la configuration de l'API Gemini (Expert_Web_Gemini) : {e}")
    
    def _build_expert_message(self, prompt: str, existing_code: str = "") -> list:
        """
        Construit le message √† envoyer √† Gemini pour la g√©n√©ration de code.
        """
        
        # Le contenu de ce prompt doit √™tre adapt√© √† la t√¢che de g√©n√©ration/modification de code
        # en se basant sur le prompt technique g√©n√©r√© par QueryToPromptTransformer.
        # Il inclut √©galement le code existant pour que Gemini puisse le modifier.
        
        message_parts = [
            """Tu es un expert en d√©veloppement web (HTML, CSS, JavaScript) avec une connaissance approfondie des bonnes pratiques et de la compatibilit√© navigateur.
            Ton r√¥le est de g√©n√©rer ou de modifier du code web en te basant sur un prompt technique tr√®s pr√©cis.

            Instructions pour g√©n√©rer le code :
            1.  **G√©n√®re un code HTML, CSS, JavaScript COMPLET et VALIDE**. N'envoie pas seulement les extraits de code, mais une page web fonctionnelle si le prompt demande une cr√©ation ou si le contexte existant est fragment√©.
            2.  **Encapsule TOUT le code g√©n√©r√© ou modifi√©** (HTML, CSS, JS) dans une seule paire de balises `[CODE_START]` et `[CODE_END]`. NE mets RIEN d'autre entre ces balises que le code.
            3.  **Int√®gre les styles CSS** dans une balise `<style>` plac√©e dans le `<head>` du document HTML.
            4.  **Int√®gre les scripts JavaScript** dans une balise `<script>` plac√©e juste avant la balise de fermeture `</body>`.
            5.  **Ne cr√©e PAS de nouveaux fichiers** (CSS ou JS externes). Tout doit √™tre int√©gr√© directement dans le fichier HTML unique.
            6.  **Respecte le prompt technique √† la lettre**. Si le prompt est ambigu, fais une interpr√©tation logique mais reste dans le cadre technique.
            7.  **Fournis une br√®ve explication** de tes modifications *avant* le bloc `[CODE_START]`.
            8.  **Ajoute des commentaires dans le code HTML/CSS/JS** pour expliquer les parties modifi√©es ou ajout√©es et pourquoi ces changements ont √©t√© faits.

            Prompt Technique :
            """ + prompt + """

            Code HTML, CSS, JavaScript EXISTANT (√† modifier ou √† utiliser comme base si applicable) :
            """ + (existing_code if existing_code else "Aucun code existant.") + """

            Ton objectif est de r√©pondre avec :
            - Une br√®ve explication textuelle de ce que tu as fait.
            - Le bloc de code HTML, CSS, JavaScript complet et valide, encadr√© par `[CODE_START]` et `[CODE_END]`.
            - Des commentaires clairs dans le code pour expliquer les modifications.
            """
        ]
        
        return [{"role": "user", "parts": message_parts}]

    def generate_code(self, prompt: str, existing_code: str = "") -> Optional[str]:
        """
        G√©n√®re du code modifi√© avec Gemini
        
        Args:
            prompt (str): Prompt technique pr√©cis (venant du transformateur Gemini)
            existing_code (str): Code existant √† modifier (contenu de Page_file)
            
        Returns:
            str: R√©ponse compl√®te de Gemini avec le code
        """
        
        # Construction du message pour Gemini
        gemini_message = self._build_expert_message(prompt, existing_code)
        
        try:
            if not self.model:
                logger.error("‚ùå Mod√®le Gemini non configur√©. Impossible de g√©n√©rer le code.")
                return None

            response = self.model.generate_content(gemini_message)
            
            if response and response.candidates:
                logger.info("‚úÖ Code g√©n√©r√© avec succ√®s par Gemini.")
                return response.candidates[0].content.parts[0].text
            else:
                logger.warning("‚ö†Ô∏è Aucune r√©ponse valide re√ßue du mod√®le Gemini pour la g√©n√©ration de code.")
                return None
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la communication avec Gemini pour la g√©n√©ration de code : {e}")
            return None

def generate_web_code(technical_prompt: str, page_file_path: str) -> Optional[str]:
    """
    Fonction principale pour g√©n√©rer du code web avec Gemini
    
    Args:
        technical_prompt (str): Prompt technique pr√©cis (venant du transformateur)
        page_file_path (str): Chemin vers le fichier de code existant
        
    Returns:
        str: R√©ponse compl√®te de Gemini avec le code
    """
    
    # Cl√© API Gemini
    GEMINI_API_KEY = os.getenv("GEMINI_API_KEY") 
    if not GEMINI_API_KEY:
        logger.error("‚ùå La cl√© API Gemini n'est pas d√©finie dans l'environnement. Impossible de cr√©er l'expert.")
        return None
    
    # Cr√©er l'expert Gemini
    expert = GeminiWebExpert(GEMINI_API_KEY)
    
    if not expert.model:
        logger.error("‚ùå Impossible d'initialiser l'expert Gemini")
        return None
    
    # Lire le code existant depuis Page_file
    existing_code = ""
    if os.path.exists(page_file_path):
        try:
            with open(page_file_path, "r", encoding="utf-8") as file:
                existing_code = file.read()
            logger.info(f"‚úÖ Code existant lu depuis {page_file_path}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur lecture fichier {page_file_path}: {e}")
            logger.warning("Continuation sans le code existant.")
    else:
        logger.info(f"‚ö†Ô∏è Fichier {page_file_path} non trouv√© - G√©n√©ration depuis z√©ro")
    
    # G√©n√©ration du code avec Gemini
    logger.info("üîÑ G√©n√©ration du code en cours avec Gemini...")
    response = expert.generate_code(technical_prompt, existing_code)
    
    if response:
        logger.info("‚úÖ R√©ponse de Gemini re√ßue.")
        return response
    else:
        logger.error("‚ùå Aucune r√©ponse de code g√©n√©r√© par Gemini.")
        return None