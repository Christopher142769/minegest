# Guide Complet d'Utilisation - Assistant Dux

## üìã Table des Mati√®res
1. [Vue d'ensemble](#vue-densemble)
2. [Structure du Projet](#structure-du-projet)
3. [Pr√©requis et Installation](#pr√©requis-et-installation)
4. [Processus de D√©marrage](#processus-de-d√©marrage)
5. [Fonctionnement Interne](#fonctionnement-interne)
6. [Guide d'Utilisation](#guide-dutilisation)
7. [Interactions avec les Dossiers](#interactions-avec-les-dossiers)
8. [D√©pannage](#d√©pannage)
9. [Bonnes Pratiques](#bonnes-pratiques)

---

## üéØ Vue d'ensemble

L'Assistant Dux est un syst√®me web intelligent qui permet de modifier des fichiers HTML, CSS et JavaScript en utilisant l'intelligence artificielle. Il combine une interface web intuitive avec un backend FastAPI et un moteur d'IA pour traiter les demandes de modification en langage naturel.

### Composants Principaux
- Interface Web : Interface utilisateur moderne et responsive
- API FastAPI : Serveur backend qui g√®re les requ√™tes
- Moteur IA : Classe AssistantDux qui traite les modifications
- Syst√®me de Fichiers : Gestion automatique des dossiers et fichiers

---

## üìÅ Structure du Projet

```
VF_test/
‚îú‚îÄ‚îÄ main.py                 # Point d'entr√©e principal (serveur FastAPI)
‚îú‚îÄ‚îÄ Assistant_Dux.py        # Classe principale avec logique IA
‚îú‚îÄ‚îÄ config.py               # Configuration et variables d'environnement
‚îú‚îÄ‚îÄ requirements.txt        # D√©pendances Python
‚îú‚îÄ‚îÄ static/                 # Interface web
‚îÇ   ‚îú‚îÄ‚îÄ index.html         # Page principale
‚îÇ   ‚îú‚îÄ‚îÄ styles.css         # Styles CSS
‚îÇ   ‚îî‚îÄ‚îÄ script.js          # Logique JavaScript
‚îú‚îÄ‚îÄ upload/                 # Dossier de travail (cr√©√© automatiquement)
‚îÇ   ‚îú‚îÄ‚îÄ TRYme.html         # Fichier par d√©faut
‚îÇ   ‚îî‚îÄ‚îÄ [autres fichiers] # Fichiers cr√©√©s/modifi√©s par l'utilisateur
‚îî‚îÄ‚îÄ logs/                   # Journaux d'activit√© (optionnel)
```

---

## üîß Pr√©requis et Installation

### Pr√©requis Syst√®me
- Python 3.8 ou sup√©rieur
- Connexion Internet (pour l'API Claude)
- Navigateur web moderne

### Installation des D√©pendances
```bash
# 1. Naviguer vers le dossier du projet
cd VF_test

# 2. Installer les d√©pendances
pip install -r requirements.txt

# 3. Configurer les variables d'environnement
# Cr√©er un fichier .env avec votre cl√© API Claude (si n√©cessaire)
```

### Variables d'Environnement Requises
```env
ANTHROPIC_API_KEY=votre_cle_api_claude
```

---

## üöÄ Processus de D√©marrage

### √âtape 1 : Lancement du Serveur
```bash
# Depuis le dossier VF_test
python main.py
```

### √âtape 2 : V√©rifications Automatiques au D√©marrage

1. Chargement de la Configuration
- Le module `config.py` charge les variables d'environnement
- V√©rification de la pr√©sence de la cl√© API

2. Initialisation des Dossiers
- Cr√©ation automatique du dossier `upload/` s'il n'existe pas
- V√©rification des permissions d'√©criture
- Cr√©ation du dossier `static/` pour l'interface web

3. Initialisation de l'Assistant
- Instanciation de la classe `AssistantDux`
- Cr√©ation du fichier par d√©faut `TRYme.html` s'il n'existe pas
- Configuration du logger pour le suivi des op√©rations

4. D√©marrage du Serveur Web
- Lancement de FastAPI sur le port 8000
- Configuration des middlewares CORS
- Montage des fichiers statiques

### √âtape 3 : Messages de Confirmation
```
üöÄ D√©marrage d'Assistant Dux Web...
üìÅ R√©pertoire d'upload: /chemin/vers/VF_test/upload
üåê Interface web: http://127.0.0.1:8000
üìñ Documentation API: http://127.0.0.1:8000/docs
```

---

## ‚öôÔ∏è Fonctionnement Interne

### Architecture du Syst√®me

1. Couche Pr√©sentation (Frontend)
- Interface web en HTML/CSS/JavaScript
- Communication avec l'API via requ√™tes AJAX
- Gestion des interactions utilisateur

2. Couche API (Backend)
- Serveur FastAPI avec endpoints sp√©cialis√©s
- Validation des donn√©es avec Pydantic
- Gestion des erreurs et logging

3. Couche Logique M√©tier
- Classe `AssistantDux` pour le traitement IA
- Int√©gration avec l'API Claude d'Anthropic
- Parsing et modification des fichiers

4. Couche Persistance
- Gestion des fichiers dans le dossier `upload/`
- Sauvegarde automatique des modifications
- Syst√®me de backup (optionnel)

### Flux de Traitement d'une Requ√™te

```mermaid
graph TD
    A[Utilisateur saisit une demande] --> B[Interface web]
    B --> C[Requ√™te POST /modify-file]
    C --> D[Validation des donn√©es]
    D --> E[AssistantDux.process_user_request]
    E --> F[Appel API Claude]
    F --> G[G√©n√©ration du code]
    G --> H[Application des modifications]
    H --> I[Sauvegarde du fichier]
    I --> J[R√©ponse √† l'utilisateur]
```

---

## üéÆ Guide d'Utilisation

### Acc√®s √† l'Interface

1. Ouvrir le Navigateur
- Aller sur `http://127.0.0.1:8000`
- L'interface se charge automatiquement

2. Vue d'Ensemble de l'Interface
- Zone de Saisie : Pour √©crire vos demandes en fran√ßais
- S√©lecteur de Fichier : Pour choisir le fichier √† modifier
- Liste des Fichiers : Affichage des fichiers disponibles
- Zone de Pr√©visualisation : Aper√ßu du code g√©n√©r√©

### Utilisation Basique

1. Cr√©er un Nouveau Fichier
```
Demande exemple : "Cr√©e une page HTML avec un titre 'Mon Site' et un bouton rouge"
Nom du fichier : "index.html"
```

2. Modifier un Fichier Existant
```
Demande exemple : "Ajoute une section contact avec un formulaire"
Fichier : "index.html" (s√©lectionn√© dans la liste)
```

3. Styling et Mise en Forme
```
Demande exemple : "Change la couleur de fond en bleu et centre le titre"
```

### Commandes Avanc√©es

1. Structure Complexe
```
"Cr√©e une page e-commerce avec header, navigation, section produits (3 colonnes), sidebar et footer responsive"
```

2. Fonctionnalit√©s JavaScript
```
"Ajoute une galerie d'images avec navigation par fl√®ches et zoom au clic"
```

3. Animations CSS
```
"Applique des animations de fondu aux √©l√©ments lors du scroll avec des transitions fluides"
```

---

## üìÇ Interactions avec les Dossiers

### Dossier `upload/`

R√¥le Principal
- Stockage de tous les fichiers de travail
- Cr√©√© automatiquement au premier lancement
- Accessible en lecture/√©criture par l'application

Op√©rations Automatiques
```python
# V√©rification/Cr√©ation au d√©marrage
UPLOAD_DIR.mkdir(parents=True, exist_ok=True)

# Cr√©ation de fichiers
def create_file_if_not_exists(file_path):
    if not Path(file_path).exists():
        # Cr√©ation avec contenu par d√©faut
        create_default_content(file_path)

# Sauvegarde des modifications
def save_file(file_path, content):
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
```

Types de Fichiers G√©r√©s
- `.html` : Pages web principales
- `.css` : Feuilles de style
- `.js` : Scripts JavaScript
- `.json` : Donn√©es de configuration
- `.txt` : Documentation et notes

### Dossier `static/`

Contenu
- `index.html` : Interface utilisateur principale
- `styles.css` : Styles de l'interface
- `script.js` : Logique client-side

Acc√®s
- Servi automatiquement par FastAPI
- URL : `http://127.0.0.1:8000/static/[fichier]`
- Ne pas modifier pendant l'ex√©cution

### Gestion des Logs

Cr√©ation Automatique
```python
# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Types de logs g√©n√©r√©s
logger.info("D√©marrage de l'application")
logger.error("Erreur de traitement")
logger.debug("Information de d√©bogage")
```

---

## üîß Endpoints API Disponibles

### GET `/`
Description : Page d'accueil de l'application
Retour : Interface web principale

### POST `/load-file`
Description : Charger le contenu d'un fichier
Param√®tres :
```json
{
  "file_path": "nom_du_fichier.html"
}
```

### POST `/modify-file`
Description : Modifier un fichier avec l'IA
Param√®tres :
```json
{
  "file_path": "nom_du_fichier.html",
  "user_query": "Description de la modification souhait√©e"
}
```

### GET `/list-files`
Description : Lister tous les fichiers disponibles
Retour :
```json
{
  "success": true,
  "files": [
    {
      "name": "index.html",
      "path": "index.html",
      "size": 1024,
      "extension": ".html"
    }
  ],
  "count": 1,
  "working_directory": "/chemin/vers/upload"
}
```

---

## üö® D√©pannage

### Probl√®mes Courants

1. Erreur de D√©marrage
```
Sympt√¥me : "Impossible de cr√©er le dossier upload"
Solution : V√©rifier les permissions du dossier parent
```

2. Erreur API Claude
```
Sympt√¥me : "Cl√© API manquante ou invalide"
Solution : V√©rifier le fichier config.py et la variable d'environnement
```

3. Fichier Non Trouv√©
```
Sympt√¥me : "Fichier non trouv√©" lors de la modification
Solution : V√©rifier que le fichier existe dans upload/
```

4. Interface Non Accessible
```
Sympt√¥me : Page ne se charge pas
Solution : V√©rifier que le serveur est d√©marr√© sur le bon port
```

### Diagnostic Avanc√©

V√©rification des Logs
```bash
# Afficher les logs en temps r√©el
tail -f logs/app.log
```

Test des Endpoints
```bash
# Test de l'API avec curl
curl -X POST "http://127.0.0.1:8000/list-files"
```

---

## ‚úÖ Bonnes Pratiques

### Utilisation Optimale

1. Formulation des Demandes
- Soyez pr√©cis et d√©taill√©s
- Utilisez des termes techniques appropri√©s
- Donnez des exemples si n√©cessaire

Exemple Bon : "Cr√©e un header sticky avec logo √† gauche, menu horizontal au centre et bouton CTA √† droite, hauteur 80px, fond blanc avec ombre port√©e"

Exemple Moins Bon : "Fais un header"

2. Gestion des Fichiers
- Utilisez des noms descriptifs
- Organisez par fonctionnalit√©
- Gardez des versions de sauvegarde importantes

3. Tests et Validation
- Testez chaque modification avant de continuer
- V√©rifiez la responsivit√© sur diff√©rents appareils
- Validez le code HTML/CSS g√©n√©r√©

### S√©curit√©

1. Protection des Donn√©es
- Ne stockez pas d'informations sensibles dans les fichiers
- Limitez l'acc√®s au dossier upload/
- Utilisez HTTPS en production

2. Gestion des Erreurs
- Surveillez les logs d'erreur
- Impl√©mentez des sauvegardes r√©guli√®res
- Testez la r√©cup√©ration apr√®s incident

### Performance

1. Optimisation des Requ√™tes
- √âvitez les demandes trop complexes en une seule fois
- Divisez les gros projets en √©tapes
- Utilisez le cache des fichiers statiques

2. Maintenance
- Nettoyez r√©guli√®rement les fichiers temporaires
- Surveillez l'espace disque du dossier upload/
- Mettez √† jour les d√©pendances Python

---

## üéØ Cas d'Usage Avanc√©s

### D√©veloppement d'Applications Web

1. Site Vitrine
```
√âtape 1 : "Cr√©e une landing page moderne avec hero section"
√âtape 2 : "Ajoute une section services avec 3 cartes"
√âtape 3 : "Int√®gre un formulaire de contact fonctionnel"
```

2. Dashboard Administratif
```
√âtape 1 : "Cr√©e un layout dashboard avec sidebar navigation"
√âtape 2 : "Ajoute des widgets statistiques avec graphiques"
√âtape 3 : "Impl√©mente un tableau de donn√©es avec tri et filtre"
```

### Prototypage Rapide

1. Test d'Id√©es
- Cr√©ation rapide de maquettes interactives
- Test d'ergonomie et d'interface
- Validation de concepts visuels

2. Pr√©sentation Client
- G√©n√©ration de d√©mos fonctionnelles
- Adaptation rapide aux feedbacks
- It√©ration continue sur le design

---

